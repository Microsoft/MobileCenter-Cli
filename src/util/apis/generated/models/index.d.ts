/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


/**
 * @class
 * Initializes a new instance of the Status class.
 * @constructor
 * @member {string} statusProperty
 * 
 */
export interface Status {
  statusProperty: string;
}

/**
 * @class
 * Initializes a new instance of the Failure class.
 * @constructor
 * @member {string} message
 * 
 */
export interface Failure {
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ErrorResponse class.
 * @constructor
 * @member {object} error
 * 
 * @member {string} [error.code] Possible values include: 'BadRequest',
 * 'Conflict', 'NotAcceptable', 'NotAuthorized', 'NotFound',
 * 'InternalServerError'
 * 
 * @member {string} [error.message]
 * 
 */
export interface ErrorResponse {
  error: ErrorDetails;
}

/**
 * @class
 * Initializes a new instance of the ErrorDetails class.
 * @constructor
 * @member {string} code Possible values include: 'BadRequest', 'Conflict',
 * 'NotAcceptable', 'NotAuthorized', 'NotFound', 'InternalServerError'
 * 
 * @member {string} message
 * 
 */
export interface ErrorDetails {
  code: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokensPostResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the api token
 * 
 * @member {string} [apiToken] The api token generated will not be accessible
 * again(so please save in a safe location)
 * 
 * @member {string} [description] The description of the token
 * 
 * @member {string} createdAt The creation time
 * 
 */
export interface ApiTokensPostResponse {
  id: string;
  apiToken?: string;
  description?: string;
  createdAt: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokensPostRequest class.
 * @constructor
 * @member {string} [description] The description of the token
 * 
 */
export interface ApiTokensPostRequest {
  description?: string;
}

/**
 * @class
 * Initializes a new instance of the ApiTokenResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the api token
 * 
 * @member {string} [description] The description of the token
 * 
 * @member {string} createdAt The creation time
 * 
 */
export interface ApiTokenResponse {
  id: string;
  description?: string;
  createdAt: string;
}

/**
 * @class
 * Initializes a new instance of the AppPatchRequest class.
 * @constructor
 * @member {string} [description] A short text describing the app
 * 
 * @member {string} [displayName] The display name of the app
 * 
 * @member {string} [name] The name of the app used in URLs
 * 
 */
export interface AppPatchRequest {
  description?: string;
  displayName?: string;
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the AppRequest class.
 * @constructor
 * @member {string} [description] A short text describing the app
 * 
 * @member {string} displayName The full name of the user. Might for example
 * be first and last name
 * 
 * @member {string} [language] The primary programming language used in the app
 * 
 * @member {string} [name] The name of the app used in URLs
 * 
 * @member {string} platform The platform of the app. Possible values include:
 * 'iOS', 'Android'
 * 
 */
export interface AppRequest {
  description?: string;
  displayName: string;
  language?: string;
  name?: string;
  platform: string;
}

/**
 * @class
 * Initializes a new instance of the UserUpdateRequest class.
 * @constructor
 * @member {string} [displayName] The full name of the user. Might for example
 * be first and last name
 * 
 */
export interface UserUpdateRequest {
  displayName?: string;
}

/**
 * @class
 * Initializes a new instance of the AppResponse class.
 * @constructor
 * @member {string} id The unique ID (UUID) of the app
 * 
 * @member {string} appSecret A unique and secret key used to identify the app
 * in communication with the ingestion endpoint for crash reporting and
 * analytics
 * 
 * @member {string} [description] The description of the app
 * 
 * @member {string} displayName The display name of the app
 * 
 * @member {string} name The name of the app used in URLs
 * 
 * @member {string} platform The platform of the app
 * 
 * @member {string} [language] The primary programming language used in the app
 * 
 * @member {string} [iconUrl] The string representation of the URL pointing to
 * the app's icon
 * 
 * @member {object} owner
 * 
 * @member {string} [owner.id] The unique id (UUID) of the owner
 * 
 * @member {string} [owner.avatarUrl] The avatar URL of the owner
 * 
 * @member {string} [owner.email] The owner's email address
 * 
 * @member {string} [owner.displayName] The owner's display name
 * 
 * @member {string} [owner.name] The unique name that used to identify the
 * owner
 * 
 * @member {string} [owner.type] The owner type. Can either be 'org' or
 * 'user'. Possible values include: 'org', 'user'
 * 
 */
export interface AppResponse {
  id: string;
  appSecret: string;
  description?: string;
  displayName: string;
  name: string;
  platform: string;
  language?: string;
  iconUrl?: string;
  owner: Owner;
}

/**
 * @class
 * Initializes a new instance of the Owner class.
 * @constructor
 * The information about the app's owner
 *
 * @member {string} id The unique id (UUID) of the owner
 * 
 * @member {string} [avatarUrl] The avatar URL of the owner
 * 
 * @member {string} email The owner's email address
 * 
 * @member {string} displayName The owner's display name
 * 
 * @member {string} name The unique name that used to identify the owner
 * 
 * @member {string} type The owner type. Can either be 'org' or 'user'.
 * Possible values include: 'org', 'user'
 * 
 */
export interface Owner {
  id: string;
  avatarUrl?: string;
  email: string;
  displayName: string;
  name: string;
  type: string;
}

/**
 * @class
 * Initializes a new instance of the UserProfileResponse class.
 * @constructor
 * @member {string} id The unique id (UUID) of the user
 * 
 * @member {string} email The email address of the user
 * 
 * @member {string} displayName The full name of the user. Might for example
 * be first and last name
 * 
 * @member {string} name The unique name that is used to identify the user.
 * 
 * @member {string} [avatarUrl] The avatar URL of the user
 * 
 * @member {boolean} [canChangePassword] User is required to send an old
 * password in order to change the password.
 * 
 */
export interface UserProfileResponse {
  id: string;
  email: string;
  displayName: string;
  name: string;
  avatarUrl?: string;
  canChangePassword?: boolean;
}

/**
 * @class
 * Initializes a new instance of the InvitationDetailResponse class.
 * @constructor
 * @member {string} id The unique ID (UUID) of the invitation
 * 
 * @member {string} email The email address of the invited user
 * 
 */
export interface InvitationDetailResponse {
  id: string;
  email: string;
}

/**
 * @class
 * Initializes a new instance of the SourceRepository class.
 * @constructor
 * The source repository
 *
 * @member {string} [name] The repository name
 * 
 */
export interface SourceRepository {
  name?: string;
}

/**
 * @class
 * Initializes a new instance of the Project class.
 * @constructor
 * A build project
 *
 * @member {string} name The project name
 * 
 * @member {string} path The path to the project
 * 
 */
export interface Project {
  name: string;
  path: string;
}

/**
 * @class
 * Initializes a new instance of the XcodeScheme class.
 * @constructor
 * @member {string} name Scheme name
 * 
 * @member {boolean} hasTestAction Does scheme have a test action?
 * 
 */
export interface XcodeScheme {
  name: string;
  hasTestAction: boolean;
}

/**
 * @class
 * Initializes a new instance of the XcodeSchemeContainer class.
 * @constructor
 * @member {string} path Path to project
 * 
 * @member {array} sharedSchemes Project schemes
 * 
 * @member {string} [podfilePath] Path to CococaPods file, if present
 * 
 */
export interface XcodeSchemeContainer {
  path: string;
  sharedSchemes: XcodeScheme[];
  podfilePath?: string;
}

/**
 * @class
 * Initializes a new instance of the XamarinSolution class.
 * @constructor
 * @member {string} path Path to solution
 * 
 * @member {array} configurations Solution configurations
 * 
 */
export interface XamarinSolution {
  path: string;
  configurations: string[];
}

/**
 * @class
 * Initializes a new instance of the ToolsetProjects class.
 * @constructor
 * A collection of projects for each type of toolset
 *
 * @member {array} [xcode] Xcode projects, with their schemes
 * 
 * @member {array} [javascript] package.json filess
 * 
 * @member {array} [xamarin] Xamarin solutions
 * 
 */
export interface ToolsetProjects {
  xcode?: XcodeSchemeContainer[];
  javascript?: string[];
  xamarin?: XamarinSolution[];
}

/**
 * @class
 * Initializes a new instance of the BranchStatus class.
 * @constructor
 * The branch build status
 *
 * @member {boolean} configured
 * 
 * @member {object} [lastBuild]
 * 
 * @member {number} [lastBuild.id] The build ID
 * 
 * @member {string} [lastBuild.buildNumber] The build number
 * 
 * @member {string} [lastBuild.queueTime] The time the build was queued
 * 
 * @member {string} [lastBuild.startTime] The time the build was started
 * 
 * @member {string} [lastBuild.finishTime] The time the build was finished
 * 
 * @member {string} [lastBuild.lastChangedDate] The time the build status was
 * last changed
 * 
 * @member {string} [lastBuild.status] The build status
 * 
 * @member {string} [lastBuild.result] The build result
 * 
 * @member {string} [lastBuild.sourceBranch] The source branch name
 * 
 * @member {string} [lastBuild.sourceVersion] The source SHA
 * 
 */
export interface BranchStatus {
  configured: boolean;
  lastBuild?: Build;
}

/**
 * @class
 * Initializes a new instance of the Build class.
 * @constructor
 * @member {number} id The build ID
 * 
 * @member {string} buildNumber The build number
 * 
 * @member {string} queueTime The time the build was queued
 * 
 * @member {string} [startTime] The time the build was started
 * 
 * @member {string} [finishTime] The time the build was finished
 * 
 * @member {string} [lastChangedDate] The time the build status was last
 * changed
 * 
 * @member {string} status The build status
 * 
 * @member {string} result The build result
 * 
 * @member {string} sourceBranch The source branch name
 * 
 * @member {string} sourceVersion The source SHA
 * 
 */
export interface Build {
  id: number;
  buildNumber: string;
  queueTime: string;
  startTime?: string;
  finishTime?: string;
  lastChangedDate?: string;
  status: string;
  result: string;
  sourceBranch: string;
  sourceVersion: string;
}

/**
 * @class
 * Initializes a new instance of the BranchProperties class.
 * @constructor
 * The branch build core properties
 *
 * @member {object} [branch]
 * 
 * @member {string} [branch.name] The branch name
 * 
 * @member {object} [branch.commit]
 * 
 * @member {string} [branch.commit.sha] The commit SHA
 * 
 * @member {string} [branch.commit.url] The URL to the commit
 * 
 * @member {boolean} [enabled]
 * 
 */
export interface BranchProperties {
  branch?: Branch;
  enabled?: boolean;
}

/**
 * @class
 * Initializes a new instance of the Branch class.
 * @constructor
 * @member {string} name The branch name
 * 
 * @member {object} commit
 * 
 * @member {string} [commit.sha] The commit SHA
 * 
 * @member {string} [commit.url] The URL to the commit
 * 
 */
export interface Branch {
  name: string;
  commit: Commit;
}

/**
 * @class
 * Initializes a new instance of the Commit class.
 * @constructor
 * @member {string} [sha] The commit SHA
 * 
 * @member {string} [url] The URL to the commit
 * 
 */
export interface Commit {
  sha?: string;
  url?: string;
}

/**
 * @class
 * Initializes a new instance of the BranchConfiguration class.
 * @constructor
 * The branch build configuration
 *
 * @member {number} id
 * 
 * @member {string} [trigger] Possible values include: 'continous', 'manual'
 * 
 * @member {boolean} [testsEnabled]
 * 
 * @member {boolean} [signed]
 * 
 * @member {object} [toolsets]
 * 
 * @member {object} [toolsets.xcode]
 * 
 * @member {string} [toolsets.xcode.projectOrWorkspacePath] Xcode
 * project/workspace path
 * 
 * @member {string} [toolsets.xcode.podfilePath] Path to CococaPods file, if
 * present
 * 
 * @member {string} [toolsets.xcode.provisioningProfileEncoded]
 * 
 * @member {string} [toolsets.xcode.certificateEncoded]
 * 
 * @member {string} [toolsets.xcode.certificatePassword]
 * 
 * @member {string} [toolsets.xcode.scheme]
 * 
 * @member {string} [toolsets.xcode.xcodeVersion]
 * 
 * @member {string} [toolsets.xcode.provisioningProfileFilename]
 * 
 * @member {string} [toolsets.xcode.certificateFilename]
 * 
 * @member {object} [toolsets.javascript]
 * 
 * @member {string} [toolsets.javascript.packageJsonPath] Path to package.json
 * file for the main project, e.g. "package.json" or "myapp/package.json"
 * 
 * @member {object} [toolsets.xamarin]
 * 
 * @member {string} [toolsets.xamarin.slnPath]
 * 
 * @member {string} [toolsets.xamarin.isSimBuild]
 * 
 * @member {string} [toolsets.xamarin.args]
 * 
 * @member {string} [toolsets.xamarin.configuration]
 * 
 * @member {string} [toolsets.xamarin.p12File]
 * 
 * @member {string} [toolsets.xamarin.p12Pwd]
 * 
 * @member {string} [toolsets.xamarin.provProfile]
 * 
 */
export interface BranchConfiguration {
  id: number;
  trigger?: string;
  testsEnabled?: boolean;
  signed?: boolean;
  toolsets?: BranchConfigurationToolsets;
}

/**
 * @class
 * Initializes a new instance of the BranchConfigurationToolsets class.
 * @constructor
 * The branch build configuration for each toolset
 *
 * @member {object} [xcode]
 * 
 * @member {string} [xcode.projectOrWorkspacePath] Xcode project/workspace path
 * 
 * @member {string} [xcode.podfilePath] Path to CococaPods file, if present
 * 
 * @member {string} [xcode.provisioningProfileEncoded]
 * 
 * @member {string} [xcode.certificateEncoded]
 * 
 * @member {string} [xcode.certificatePassword]
 * 
 * @member {string} [xcode.scheme]
 * 
 * @member {string} [xcode.xcodeVersion]
 * 
 * @member {string} [xcode.provisioningProfileFilename]
 * 
 * @member {string} [xcode.certificateFilename]
 * 
 * @member {object} [javascript]
 * 
 * @member {string} [javascript.packageJsonPath] Path to package.json file for
 * the main project, e.g. "package.json" or "myapp/package.json"
 * 
 * @member {object} [xamarin]
 * 
 * @member {string} [xamarin.slnPath]
 * 
 * @member {string} [xamarin.isSimBuild]
 * 
 * @member {string} [xamarin.args]
 * 
 * @member {string} [xamarin.configuration]
 * 
 * @member {string} [xamarin.p12File]
 * 
 * @member {string} [xamarin.p12Pwd]
 * 
 * @member {string} [xamarin.provProfile]
 * 
 */
export interface BranchConfigurationToolsets {
  xcode?: XcodeBranchConfigurationProperties;
  javascript?: JavaScriptBranchConfigurationProperties;
  xamarin?: XamarinBranchConfigurationProperties;
}

/**
 * @class
 * Initializes a new instance of the XcodeBranchConfigurationProperties class.
 * @constructor
 * Build configuration when Xcode is part of the build steps
 *
 * @member {string} projectOrWorkspacePath Xcode project/workspace path
 * 
 * @member {string} [podfilePath] Path to CococaPods file, if present
 * 
 * @member {string} [provisioningProfileEncoded]
 * 
 * @member {string} [certificateEncoded]
 * 
 * @member {string} [certificatePassword]
 * 
 * @member {string} scheme
 * 
 * @member {string} xcodeVersion
 * 
 * @member {string} [provisioningProfileFilename]
 * 
 * @member {string} [certificateFilename]
 * 
 */
export interface XcodeBranchConfigurationProperties {
  projectOrWorkspacePath: string;
  podfilePath?: string;
  provisioningProfileEncoded?: string;
  certificateEncoded?: string;
  certificatePassword?: string;
  scheme: string;
  xcodeVersion: string;
  provisioningProfileFilename?: string;
  certificateFilename?: string;
}

/**
 * @class
 * Initializes a new instance of the JavaScriptBranchConfigurationProperties class.
 * @constructor
 * Build configuration when React Native, or other JavaScript tech, is part of
 * the build steps
 *
 * @member {string} packageJsonPath Path to package.json file for the main
 * project, e.g. "package.json" or "myapp/package.json"
 * 
 */
export interface JavaScriptBranchConfigurationProperties {
  packageJsonPath: string;
}

/**
 * @class
 * Initializes a new instance of the XamarinBranchConfigurationProperties class.
 * @constructor
 * Build configuration for Xamarin projects
 *
 * @member {string} slnPath
 * 
 * @member {string} isSimBuild
 * 
 * @member {string} args
 * 
 * @member {string} configuration
 * 
 * @member {string} p12File
 * 
 * @member {string} p12Pwd
 * 
 * @member {string} provProfile
 * 
 */
export interface XamarinBranchConfigurationProperties {
  slnPath: string;
  isSimBuild: string;
  args: string;
  configuration: string;
  p12File: string;
  p12Pwd: string;
  provProfile: string;
}

/**
 * @class
 * Initializes a new instance of the RepoInfo class.
 * @constructor
 * @member {string} repoUrl The repository url
 * 
 */
export interface RepoInfo {
  repoUrl: string;
}

/**
 * @class
 * Initializes a new instance of the XcodeVersion class.
 * @constructor
 * The Xcode version
 *
 * @member {string} [name] The version name
 * 
 * @member {boolean} [current] If the version is current
 * 
 */
export interface XcodeVersion {
  name?: string;
  current?: boolean;
}

/**
 * @class
 * Initializes a new instance of the BuildPatch class.
 * @constructor
 * @member {string} [status] The build status
 * 
 */
export interface BuildPatch {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the SuccessResponse class.
 * @constructor
 * @member {string} message
 * 
 */
export interface SuccessResponse {
  message: string;
}

/**
 * @class
 * Initializes a new instance of the ValidationErrorResponse class.
 * @constructor
 * @member {string} id
 * 
 * @member {string} code
 * 
 * @member {string} message
 * 
 */
export interface ValidationErrorResponse {
  id: string;
  code: string;
  message: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadBeginResponse class.
 * @constructor
 * A response containing information pertaining to starting a package upload
 * process
 *
 * @member {string} uploadId The ID for the current upload
 * 
 * @member {string} uploadUrl The URL where the client needs to upload the
 * package to
 * 
 */
export interface PackageUploadBeginResponse {
  uploadId: string;
  uploadUrl: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadEndRequest class.
 * @constructor
 * A request containing information pertaining to completing a package upload
 * process
 *
 * @member {string} status The desired operation for the upload. Possible
 * values include: 'committed', 'aborted'
 * 
 */
export interface PackageUploadEndRequest {
  status: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUploadEndResponse class.
 * @constructor
 * A response containing information about the uploaded package.
 *
 * @member {string} [packageUrl] A URL to the new package. If upload was
 * aborted will be null.
 * 
 */
export interface PackageUploadEndResponse {
  packageUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the PackageUpdateRequest class.
 * @constructor
 * A request containing information pertaining to distributing a package.
 *
 * @member {string} [status] The package state.<br>
 * <b>available</b>: The uploaded package has been distributed.<br>
 * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
 * . Possible values include: 'available', 'unavailable'
 * 
 * @member {string} [releaseNotes] Release notes for this package.
 * 
 */
export interface PackageUpdateRequest {
  status?: string;
  releaseNotes?: string;
}

/**
 * @class
 * Initializes a new instance of the PackageDetails class.
 * @constructor
 * Details of an uploaded package
 *
 * @member {string} [packageId] ID identifying this unique package.
 * 
 * @member {string} [status] The package state.<br>
 * <b>available</b>: The uploaded package has been distributed.<br>
 * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
 * . Possible values include: 'available', 'unavailable'
 * 
 * @member {string} [appName] The app's name (extracted from the uploaded
 * package).
 * 
 * @member {string} [version] The package's version.<br>
 * For iOS: CFBundleVersion from info.plist.
 * For Android: android:versionCode from AppManifest.xml.
 * 
 * @member {string} [shortVersion] The package's short version.<br>
 * For iOS: CFBundleShortVersionString from info.plist.
 * For Android: android:versionName from AppManifest.xml.
 * 
 * @member {string} [releaseNotes] The package's release notes.
 * 
 * @member {string} [provisioningProfileName] The package's release notes.
 * 
 * @member {number} [size] The package's size in bytes.
 * 
 * @member {string} [minOs] The package's minimum required operating system.
 * 
 * @member {string} [fingerprint] MD5 checksum of the package binary.
 * 
 * @member {string} [uploadedAt] UTC time in ISO 8601 format of the uploaded
 * time.
 * 
 * @member {string} [downloadUrl] The URL that hosts the binary for this
 * package.
 * 
 * @member {string} [appIconUrl] A URL to the app's icon.
 * 
 * @member {string} [installUrl] The href required to install a package on a
 * mobile device. On iOS devices will be prefixed with
 * `itms-services://?action=download-manifest&url=`
 * 
 */
export interface PackageDetails {
  packageId?: string;
  status?: string;
  appName?: string;
  version?: string;
  shortVersion?: string;
  releaseNotes?: string;
  provisioningProfileName?: string;
  size?: number;
  minOs?: string;
  fingerprint?: string;
  uploadedAt?: string;
  downloadUrl?: string;
  appIconUrl?: string;
  installUrl?: string;
}

/**
 * @class
 * Initializes a new instance of the Symbol class.
 * @constructor
 * @member {string} symbolId The unique id for this symbol (uuid)
 * 
 * @member {string} type The type of the symbol for the current symbol upload.
 * Possible values include: 'Apple', 'AndroidNative', 'AndroidJava', 'Windows'
 * 
 * @member {string} appId The application that this symbol belongs to
 * 
 * @member {string} platform The platform that this symbol is for
 * 
 * @member {string} url The URL at which the client may download the symbol
 * file
 * 
 * @member {string} origin The origin of the symbol file. Possible values
 * include: 'System', 'User'
 * 
 * @member {array} alternateSymbolIds The other symbols in the same file
 * 
 */
export interface Symbol {
  symbolId: string;
  type: string;
  appId: string;
  platform: string;
  url: string;
  origin: string;
  alternateSymbolIds: string[];
}

/**
 * @class
 * Initializes a new instance of the SymbolUpload class.
 * @constructor
 * A single symbol upload entity
 *
 * @member {string} symbolUploadId The id for the current symbol upload
 * 
 * @member {string} appId The application that this symbol upload belongs to
 * 
 * @member {string} status The current status for the symbol upload. Possible
 * values include: 'created', 'committed', 'aborted', 'processing',
 * 'indexed', 'failed'
 * 
 * @member {string} symbolType The type of the symbol for the current symbol
 * upload. Possible values include: 'Apple', 'AndroidNative', 'AndroidJava',
 * 'Windows'
 * 
 * @member {array} [symbols] The symbol ids
 * 
 * @member {string} [origin] The origin of the symbol upload. Possible values
 * include: 'User', 'System'
 * 
 */
export interface SymbolUpload {
  symbolUploadId: string;
  appId: string;
  status: string;
  symbolType: string;
  symbols?: Symbol[];
  origin?: string;
}

/**
 * @class
 * Initializes a new instance of the SymbolUploadBeginRequest class.
 * @constructor
 * A request containing information pertaining to starting a symbol upload
 * process
 *
 * @member {string} symbolType The type of the symbol for the current symbol
 * upload. Possible values include: 'Apple', 'AndroidNative', 'AndroidJava',
 * 'Windows'
 * 
 * @member {string} [clientCallback] The callback URL that the client can
 * optionally provide to get status updates for the current symbol upload
 * 
 */
export interface SymbolUploadBeginRequest {
  symbolType: string;
  clientCallback?: string;
}

/**
 * @class
 * Initializes a new instance of the SymbolUploadBeginResponse class.
 * @constructor
 * A response containing information pertaining to starting a symbol upload
 * process
 *
 * @member {string} symbolUploadId The id for the current upload
 * 
 * @member {string} uploadUrl The URL where the client needs to upload the
 * symbol blob to
 * 
 * @member {date} expirationDate Describes how long the upload_url is valid
 * 
 */
export interface SymbolUploadBeginResponse {
  symbolUploadId: string;
  uploadUrl: string;
  expirationDate: Date;
}

/**
 * @class
 * Initializes a new instance of the SymbolUploadEndRequest class.
 * @constructor
 * A request containing information pertaining to completing a symbol upload
 * process
 *
 * @member {string} status The desired operation for the symbol upload.
 * Possible values include: 'committed', 'aborted'
 * 
 */
export interface SymbolUploadEndRequest {
  status: string;
}

/**
 * @class
 * Initializes a new instance of the AppVersion class.
 * @constructor
 * @member {string} appVersionId
 * 
 * @member {string} appId
 * 
 * @member {string} displayName
 * 
 * @member {string} appVersionProperty
 * 
 * @member {string} [buildNumber]
 * 
 */
export interface AppVersion {
  appVersionId: string;
  appId: string;
  displayName: string;
  appVersionProperty: string;
  buildNumber?: string;
}

/**
 * @class
 * Initializes a new instance of the Stacktrace class.
 * @constructor
 * a stacktrace in a processed and prettyfied way
 *
 * @member {string} [title]
 * 
 * @member {string} [reason]
 * 
 * @member {array} [threads]
 * 
 * @member {object} [exception]
 * 
 * @member {string} [exception.reason] Reason of the exception
 * 
 * @member {string} [exception.type] Type of the exception
 * (NSSomethingException, NullPointerException)
 * 
 * @member {array} [exception.frames] frames of the excetpion
 * 
 * @member {boolean} [exception.relevant] relevant exception (crashed)
 * 
 * @member {array} [exception.innerException]
 * 
 */
export interface Stacktrace {
  title?: string;
  reason?: string;
  threads?: Thread[];
  exception?: Exception;
}

/**
 * @class
 * Initializes a new instance of the Thread class.
 * @constructor
 * a thread representation
 *
 * @member {string} title name of the thread
 * 
 * @member {array} frames frames of that thread
 * 
 * @member {object} [exception] potential additional exception happened in
 * that thread (Last Exception Backtrace)
 * 
 * @member {string} [exception.reason] Reason of the exception
 * 
 * @member {string} [exception.type] Type of the exception
 * (NSSomethingException, NullPointerException)
 * 
 * @member {array} [exception.frames] frames of the excetpion
 * 
 * @member {boolean} [exception.relevant] relevant exception (crashed)
 * 
 * @member {array} [exception.innerException]
 * 
 * @member {boolean} [relevant] Shows if a thread is relevant or not. Is false
 * if all frames are non relevant, otherwise true
 * 
 */
export interface Thread {
  title: string;
  frames: StackFrame[];
  exception?: Exception;
  relevant?: boolean;
}

/**
 * @class
 * Initializes a new instance of the StackFrame class.
 * @constructor
 * a single frame of a stack trace
 *
 * @member {string} [address] address of the frame
 * 
 * @member {string} [className] name of the class
 * 
 * @member {string} [method] name of the method
 * 
 * @member {boolean} [classMethod] is a class method
 * 
 * @member {string} [file] name of the file
 * 
 * @member {number} [line] line number
 * 
 * @member {boolean} appCode this line isn't from any framework
 * 
 * @member {string} [frameworkName] Name of the framework
 * 
 * @member {string} codeRaw Raw frame string
 * 
 * @member {string} codeFormatted Formatted frame string
 * 
 * @member {string} [language] programming language of the frame
 * 
 * @member {boolean} [relevant] frame should be shown always
 * 
 */
export interface StackFrame {
  address?: string;
  className?: string;
  method?: string;
  classMethod?: boolean;
  file?: string;
  line?: number;
  appCode: boolean;
  frameworkName?: string;
  codeRaw: string;
  codeFormatted: string;
  language?: string;
  relevant?: boolean;
}

/**
 * @class
 * Initializes a new instance of the Exception class.
 * @constructor
 * a exception
 *
 * @member {string} [reason] Reason of the exception
 * 
 * @member {string} [type] Type of the exception (NSSomethingException,
 * NullPointerException)
 * 
 * @member {array} frames frames of the excetpion
 * 
 * @member {boolean} [relevant] relevant exception (crashed)
 * 
 * @member {array} [innerException]
 * 
 */
export interface Exception {
  reason?: string;
  type?: string;
  frames: StackFrame[];
  relevant?: boolean;
  innerException?: Exception[];
}

/**
 * @class
 * Initializes a new instance of the CrashGroup class.
 * @constructor
 * @member {string} crashGroupId
 * 
 * @member {string} displayId
 * 
 * @member {string} appVersion
 * 
 * @member {string} status Possible values include: 'Open', 'Closed', 'Ignored'
 * 
 * @member {number} count
 * 
 * @member {number} [impactedUsers]
 * 
 * @member {date} firstOccurrence
 * 
 * @member {date} lastOccurrence
 * 
 * @member {string} [exception]
 * 
 * @member {string} errorReason
 * 
 * @member {object} [reasonFrame]
 * 
 * @member {string} [reasonFrame.address] address of the frame
 * 
 * @member {string} [reasonFrame.className] name of the class
 * 
 * @member {string} [reasonFrame.method] name of the method
 * 
 * @member {boolean} [reasonFrame.classMethod] is a class method
 * 
 * @member {string} [reasonFrame.file] name of the file
 * 
 * @member {number} [reasonFrame.line] line number
 * 
 * @member {boolean} [reasonFrame.appCode] this line isn't from any framework
 * 
 * @member {string} [reasonFrame.frameworkName] Name of the framework
 * 
 * @member {string} [reasonFrame.codeRaw] Raw frame string
 * 
 * @member {string} [reasonFrame.codeFormatted] Formatted frame string
 * 
 * @member {string} [reasonFrame.language] programming language of the frame
 * 
 * @member {boolean} [reasonFrame.relevant] frame should be shown always
 * 
 * @member {boolean} fatal Crash or handled exception
 * 
 */
export interface CrashGroup {
  crashGroupId: string;
  displayId: string;
  appVersion: string;
  status: string;
  count: number;
  impactedUsers?: number;
  firstOccurrence: Date;
  lastOccurrence: Date;
  exception?: string;
  errorReason: string;
  reasonFrame?: StackFrame;
  fatal: boolean;
}

/**
 * @class
 * Initializes a new instance of the CrashGroupChange class.
 * @constructor
 * @member {string} [status] Possible values include: 'Open', 'Closed',
 * 'Ignored'
 * 
 */
export interface CrashGroupChange {
  status?: string;
}

/**
 * @class
 * Initializes a new instance of the Crash class.
 * @constructor
 * @member {string} crashId
 * 
 * @member {string} [displayId]
 * 
 * @member {date} timestamp
 * 
 * @member {string} version
 * 
 * @member {string} build
 * 
 * @member {string} device
 * 
 * @member {string} osVersion
 * 
 * @member {string} userName
 * 
 * @member {string} [userEmail]
 * 
 */
export interface Crash {
  crashId: string;
  displayId?: string;
  timestamp: Date;
  version: string;
  build: string;
  device: string;
  osVersion: string;
  userName: string;
  userEmail?: string;
}

/**
 * @class
 * Initializes a new instance of the Segmentation class.
 * @constructor
 * @member {array} [data]
 * 
 */
export interface Segmentation {
  data?: SegmentationDataItem[];
}

/**
 * @class
 * Initializes a new instance of the SegmentationDataItem class.
 * @constructor
 * @member {string} [name]
 * 
 * @member {number} [count]
 * 
 */
export interface SegmentationDataItem {
  name?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the Histogram class.
 * @constructor
 * @member {number} [aggregate]
 * 
 * @member {array} [data]
 * 
 */
export interface Histogram {
  aggregate?: number;
  data?: HistogramDataItem[];
}

/**
 * @class
 * Initializes a new instance of the HistogramDataItem class.
 * @constructor
 * @member {date} [date]
 * 
 * @member {number} [count]
 * 
 */
export interface HistogramDataItem {
  date?: Date;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashCounts class.
 * @constructor
 * @member {number} [totalCount]
 * 
 * @member {array} [crashes] the total crash count for day
 * 
 */
export interface CrashCounts {
  totalCount?: number;
  crashes?: DateTimeCounts[];
}

/**
 * @class
 * Initializes a new instance of the DateTimeCounts class.
 * @constructor
 * @member {string} [datetime] the ISO 8601 datetime
 * 
 * @member {number} [count] count of the object
 * 
 */
export interface DateTimeCounts {
  datetime?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the ActiveDeviceCounts class.
 * @constructor
 * @member {array} [daily] the active device count for each interval
 * 
 * @member {array} [weekly] the active device count for each interval with a
 * week's retention
 * 
 * @member {array} [monthly] the active device count for each interval with a
 * month's retention
 * 
 */
export interface ActiveDeviceCounts {
  daily?: DateTimeCounts[];
  weekly?: DateTimeCounts[];
  monthly?: DateTimeCounts[];
}

/**
 * @class
 * Initializes a new instance of the Places class.
 * @constructor
 * Places and count during the time range in descending order
 *
 * @member {number} [total]
 * 
 * @member {array} [placesProperty]
 * 
 */
export interface Places {
  total?: number;
  placesProperty?: Place[];
}

/**
 * @class
 * Initializes a new instance of the Place class.
 * @constructor
 * The place code and the count
 *
 * @member {string} [code] the place code
 * 
 * @member {number} [count] the count of the this place
 * 
 * @member {number} [previousCount] the count of previous time range of the
 * place
 * 
 */
export interface Place {
  code?: string;
  count?: number;
  previousCount?: number;
}

/**
 * @class
 * Initializes a new instance of the ErrorModel class.
 * @constructor
 * Error
 *
 * @member {object} [error]
 * 
 * @member {number} [error.code] The status code return by the API. It can be
 * 400 or 403 or 500.
 * 
 * @member {string} [error.message] The reason for the request failed
 * 
 */
export interface ErrorModel {
  error?: ErrorError;
}

/**
 * @class
 * Initializes a new instance of the ErrorError class.
 * @constructor
 * @member {number} [code] The status code return by the API. It can be 400 or
 * 403 or 500.
 * 
 * @member {string} [message] The reason for the request failed
 * 
 */
export interface ErrorError {
  code?: number;
  message?: string;
}

/**
 * @class
 * Initializes a new instance of the SessionDurationsDistribution class.
 * @constructor
 * @member {array} [distribution] the count of sessions in these buckets
 * 
 * @member {string} [previousAverageDuration] the previous average session
 * duration for previous time range
 * 
 * @member {string} [averageDuration] the average session duration for current
 * time range
 * 
 */
export interface SessionDurationsDistribution {
  distribution?: SessionDurationsDistributionDistributionItem[];
  previousAverageDuration?: string;
  averageDuration?: string;
}

/**
 * @class
 * Initializes a new instance of the SessionDurationsDistributionDistributionItem class.
 * @constructor
 * @member {string} [bucket] the bucket name
 * 
 * @member {number} [count] the count of sessions in current bucket
 * 
 */
export interface SessionDurationsDistributionDistributionItem {
  bucket?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the Versions class.
 * @constructor
 * @member {array} [versionsProperty]
 * 
 * @member {number} [total] the total count of versions
 * 
 */
export interface Versions {
  versionsProperty?: Version[];
  total?: number;
}

/**
 * @class
 * Initializes a new instance of the Version class.
 * @constructor
 * @member {string} [versionProperty]
 * 
 * @member {number} [count]
 * 
 * @member {number} [previousCount] the count of previous time range of the
 * version
 * 
 */
export interface Version {
  versionProperty?: string;
  count?: number;
  previousCount?: number;
}

/**
 * @class
 * Initializes a new instance of the SessionCounts class.
 * @constructor
 * @member {number} [totalCount]
 * 
 * @member {number} [previousTotalCount]
 * 
 * @member {array} [sessions] the total session count for each interval
 * 
 */
export interface SessionCounts {
  totalCount?: number;
  previousTotalCount?: number;
  sessions?: DateTimeCounts[];
}

/**
 * @class
 * Initializes a new instance of the SessionsPerDevice class.
 * @constructor
 * @member {number} [averageSessionsPerUser]
 * 
 * @member {number} [previousAverageSessionsPerUser]
 * 
 * @member {number} [totalCount]
 * 
 * @member {number} [previousTotalCount]
 * 
 * @member {array} [sessionsPerUser] the session count for each interval per
 * device
 * 
 */
export interface SessionsPerDevice {
  averageSessionsPerUser?: number;
  previousAverageSessionsPerUser?: number;
  totalCount?: number;
  previousTotalCount?: number;
  sessionsPerUser?: SessionsPerDeviceSessionsPerUserItem[];
}

/**
 * @class
 * Initializes a new instance of the SessionsPerDeviceSessionsPerUserItem class.
 * @constructor
 * @member {string} [datetime] the ISO 8601 datetime
 * 
 * @member {number} [count] count
 * 
 */
export interface SessionsPerDeviceSessionsPerUserItem {
  datetime?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the Models class.
 * @constructor
 * @member {number} [total]
 * 
 * @member {array} [modelsProperty]
 * 
 */
export interface Models {
  total?: number;
  modelsProperty?: Model[];
}

/**
 * @class
 * Initializes a new instance of the Model class.
 * @constructor
 * @member {string} [modelName] model's name
 * 
 * @member {number} [count] count current of model
 * 
 * @member {number} [previousCount] count of previous model
 * 
 */
export interface Model {
  modelName?: string;
  count?: number;
  previousCount?: number;
}

/**
 * @class
 * Initializes a new instance of the Languages class.
 * @constructor
 * @member {number} [total]
 * 
 * @member {array} [languagesProperty]
 * 
 */
export interface Languages {
  total?: number;
  languagesProperty?: Language[];
}

/**
 * @class
 * Initializes a new instance of the Language class.
 * @constructor
 * @member {string} [languageName] language's name
 * 
 * @member {number} [count] count current of language
 * 
 * @member {number} [previousCount] count of previous lanugage
 * 
 */
export interface Language {
  languageName?: string;
  count?: number;
  previousCount?: number;
}

/**
 * @class
 * Initializes a new instance of the OSes class.
 * @constructor
 * @member {number} [total]
 * 
 * @member {array} [osesProperty]
 * 
 */
export interface OSes {
  total?: number;
  osesProperty?: OS[];
}

/**
 * @class
 * Initializes a new instance of the OS class.
 * @constructor
 * @member {string} [osName] OS name
 * 
 * @member {number} [count] count current of OS
 * 
 * @member {number} [previousCount] count of previous OS
 * 
 */
export interface OS {
  osName?: string;
  count?: number;
  previousCount?: number;
}

/**
 * @class
 * Initializes a new instance of the AvailableVersions class.
 * @constructor
 * @member {array} [versions] List of available versions.
 * 
 * @member {number} [totalCount] The full number of versions accross all pages.
 * 
 */
export interface AvailableVersions {
  versions?: string[];
  totalCount?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashFreeDevicePercentages class.
 * @constructor
 * @member {number} [overtimePercentage]
 * 
 * @member {array} [dailyPercentages] the crash-free percentage for day
 * 
 */
export interface CrashFreeDevicePercentages {
  overtimePercentage?: number;
  dailyPercentages?: DateTimePercentages[];
}

/**
 * @class
 * Initializes a new instance of the DateTimePercentages class.
 * @constructor
 * @member {string} [datetime] the ISO 8601 datetime
 * 
 * @member {number} [percentage] percentage of the object
 * 
 */
export interface DateTimePercentages {
  datetime?: string;
  percentage?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashesOverallItem class.
 * @constructor
 * @member {string} [crashGroupId]
 * 
 * @member {string} [appVersion]
 * 
 * @member {object} [overall]
 * 
 * @member {number} [overall.crashCount]
 * 
 * @member {number} [overall.deviceCount]
 * 
 */
export interface CrashesOverallItem {
  crashGroupId?: string;
  appVersion?: string;
  overall?: CrashOverall;
}

/**
 * @class
 * Initializes a new instance of the CrashOverall class.
 * @constructor
 * @member {number} [crashCount]
 * 
 * @member {number} [deviceCount]
 * 
 */
export interface CrashOverall {
  crashCount?: number;
  deviceCount?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashGroupModels class.
 * @constructor
 * @member {number} [total]
 * 
 * @member {array} [models]
 * 
 */
export interface CrashGroupModels {
  total?: number;
  models?: CrashGroupModel[];
}

/**
 * @class
 * Initializes a new instance of the CrashGroupModel class.
 * @constructor
 * @member {string} [modelName] model's name
 * 
 * @member {number} [count] count of model
 * 
 */
export interface CrashGroupModel {
  modelName?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashGroupOSes class.
 * @constructor
 * @member {number} [total]
 * 
 * @member {array} [oses]
 * 
 */
export interface CrashGroupOSes {
  total?: number;
  oses?: CrashGroupOS[];
}

/**
 * @class
 * Initializes a new instance of the CrashGroupOS class.
 * @constructor
 * @member {string} [osName] OS name
 * 
 * @member {number} [count] count of OS
 * 
 */
export interface CrashGroupOS {
  osName?: string;
  count?: number;
}

/**
 * @class
 * Initializes a new instance of the CrashGroupContainer class.
 * @constructor
 * @member {array} crashgroups
 * 
 */
export interface CrashGroupContainer {
  crashgroups: CrashgroupModelModel[];
}

/**
 * @class
 * Initializes a new instance of the CrashgroupModelModel class.
 * @constructor
 * @member {string} [crashGroupId]
 * 
 * @member {string} [appVersion]
 * 
 */
export interface CrashgroupModelModel {
  crashGroupId?: string;
  appVersion?: string;
}

/**
 * @class
 * Initializes a new instance of the Crashgroups class.
 * @constructor
 * @member {array} crashgroupsProperty
 * 
 */
export interface Crashgroups {
  crashgroupsProperty: CrashgroupModelModel[];
}

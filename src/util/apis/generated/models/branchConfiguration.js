/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the BranchConfiguration class.
 * @constructor
 * The branch build configuration
 *
 * @member {number} id
 * 
 * @member {string} [trigger] Possible values include: 'continous', 'manual'
 * 
 * @member {boolean} [testsEnabled]
 * 
 * @member {boolean} [signed]
 * 
 * @member {object} [toolsets]
 * 
 * @member {object} [toolsets.xcode]
 * 
 * @member {string} [toolsets.xcode.projectOrWorkspacePath] Xcode
 * project/workspace path
 * 
 * @member {string} [toolsets.xcode.podfilePath] Path to CococaPods file, if
 * present
 * 
 * @member {string} [toolsets.xcode.provisioningProfileEncoded]
 * 
 * @member {string} [toolsets.xcode.certificateEncoded]
 * 
 * @member {string} [toolsets.xcode.certificatePassword]
 * 
 * @member {string} [toolsets.xcode.scheme]
 * 
 * @member {string} [toolsets.xcode.xcodeVersion]
 * 
 * @member {string} [toolsets.xcode.provisioningProfileFilename]
 * 
 * @member {string} [toolsets.xcode.certificateFilename]
 * 
 * @member {object} [toolsets.javascript]
 * 
 * @member {string} [toolsets.javascript.packageJsonPath] Path to package.json
 * file for the main project, e.g. "package.json" or "myapp/package.json"
 * 
 * @member {object} [toolsets.xamarin]
 * 
 * @member {string} [toolsets.xamarin.slnPath]
 * 
 * @member {string} [toolsets.xamarin.isSimBuild]
 * 
 * @member {string} [toolsets.xamarin.args]
 * 
 * @member {string} [toolsets.xamarin.configuration]
 * 
 * @member {string} [toolsets.xamarin.p12File]
 * 
 * @member {string} [toolsets.xamarin.p12Pwd]
 * 
 * @member {string} [toolsets.xamarin.provProfile]
 * 
 */
function BranchConfiguration() {
}

/**
 * Defines the metadata of BranchConfiguration
 *
 * @returns {object} metadata of BranchConfiguration
 *
 */
BranchConfiguration.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'BranchConfiguration',
    type: {
      name: 'Composite',
      className: 'BranchConfiguration',
      modelProperties: {
        id: {
          required: true,
          serializedName: 'id',
          type: {
            name: 'Number'
          }
        },
        trigger: {
          required: false,
          serializedName: 'trigger',
          type: {
            name: 'String'
          }
        },
        testsEnabled: {
          required: false,
          serializedName: 'testsEnabled',
          type: {
            name: 'Boolean'
          }
        },
        signed: {
          required: false,
          serializedName: 'signed',
          type: {
            name: 'Boolean'
          }
        },
        toolsets: {
          required: false,
          serializedName: 'toolsets',
          type: {
            name: 'Composite',
            className: 'BranchConfigurationToolsets'
          }
        }
      }
    }
  };
};

module.exports = BranchConfiguration;

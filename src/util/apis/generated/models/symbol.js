/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Symbol class.
 * @constructor
 * @member {string} symbolId The unique id for this symbol (uuid)
 * 
 * @member {string} type The type of the symbol for the current symbol upload.
 * Possible values include: 'Apple', 'AndroidNative', 'AndroidJava', 'Windows'
 * 
 * @member {string} appId The application that this symbol belongs to
 * 
 * @member {string} platform The platform that this symbol is for
 * 
 * @member {string} url The URL at which the client may download the symbol
 * file
 * 
 * @member {string} origin The origin of the symbol file. Possible values
 * include: 'System', 'User'
 * 
 * @member {array} alternateSymbolIds The other symbols in the same file
 * 
 */
function Symbol() {
}

/**
 * Defines the metadata of Symbol
 *
 * @returns {object} metadata of Symbol
 *
 */
Symbol.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Symbol',
    type: {
      name: 'Composite',
      className: 'Symbol',
      modelProperties: {
        symbolId: {
          required: true,
          serializedName: 'symbol_id',
          type: {
            name: 'String'
          }
        },
        type: {
          required: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        appId: {
          required: true,
          serializedName: 'app_id',
          type: {
            name: 'String'
          }
        },
        platform: {
          required: true,
          serializedName: 'platform',
          type: {
            name: 'String'
          }
        },
        url: {
          required: true,
          serializedName: 'url',
          type: {
            name: 'String'
          }
        },
        origin: {
          required: true,
          serializedName: 'origin',
          type: {
            name: 'String'
          }
        },
        alternateSymbolIds: {
          required: true,
          serializedName: 'alternate_symbol_ids',
          type: {
            name: 'Sequence',
            element: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        }
      }
    }
  };
};

module.exports = Symbol;

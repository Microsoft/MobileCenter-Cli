/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Account
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Account {

    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    rejectInvitation(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    rejectInvitation(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    acceptInvitation(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    acceptInvitation(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getUserProfile(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getUserProfile(callback: ServiceCallback<any>): void;

    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateUserProfile(options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updateUserProfile(callback: ServiceCallback<any>): void;

    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAppUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteAppUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppUsers(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getAppUsers(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    inviteAppUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    inviteAppUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteAppInvitation(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteAppInvitation(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppInvitations(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getAppInvitations(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * BuildOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface BuildOperations {

    /**
     * Gets the Xcode versions available to this app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getXcodeVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getXcodeVersions(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets the repositories available from the source code host
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRepositories(ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRepositories(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the repository build configuration status of the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRepositoryConfiguration(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRepositoryConfiguration(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the repository for build
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} repoUrl The repository url
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    configureRepository(ownerName: string, appName: string, repoUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    configureRepository(ownerName: string, appName: string, repoUrl: string, callback: ServiceCallback<any>): void;

    /**
     * Removes the configuration for the respository
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteRepositoryConfiguration(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteRepositoryConfiguration(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns commit information for a batch of shas
     *
     * @param {string} shaCollection A collection of commit SHAs comma-delimited
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.form] The selected form of the object. Possible
     * values include: 'lite', 'full'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCommitInfo(shaCollection: string, ownerName: string, appName: string, options: { form? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Branch[]>): void;
    getCommitInfo(shaCollection: string, ownerName: string, appName: string, callback: ServiceCallback<models.Branch[]>): void;

    /**
     * Gets the download URI
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    getDownloadUri(buildId: number, downloadType: string, ownerName: string, appName: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the build detail for the given build ID
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildDetails(buildId: number, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    getBuildDetails(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Updates the build properties
     *
     * @param {number} buildId The build ID
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The build status
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateProperties(buildId: number, ownerName: string, appName: string, options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    updateProperties(buildId: number, ownerName: string, appName: string, callback: ServiceCallback<models.Build>): void;

    /**
     * Returns the projects in the repository for the branch, for all toolsets
     *
     * @param {string} branch The branch name
     * 
     * @param {string} platform The desired platform for the project scan;
     * normally the same as the app platform. Possible values include: 'iOS',
     * 'Android'
     * 
     * @param {string} language The desired language for the project scan;
     * normally the same as the app language. Possible values include:
     * 'objective-c', 'swift', 'javascript', 'c#'
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getToolsetProjects(branch: string, platform: string, language: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ToolsetProjects>): void;
    getToolsetProjects(branch: string, platform: string, language: string, ownerName: string, appName: string, callback: ServiceCallback<models.ToolsetProjects>): void;

    /**
     * Returns the projects for the branch (deprecated, use toolset_projects
     * instead)
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getProjectsDeprecated(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project[]>): void;
    getProjectsDeprecated(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Project[]>): void;

    /**
     * Gets the branch configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Configures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    configureBranch(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    configureBranch(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Reconfigures the branch for build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reconfigureBranch(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BranchConfiguration>): void;
    reconfigureBranch(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.BranchConfiguration>): void;

    /**
     * Deletes the branch build configuration
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteBranchConfiguration(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SuccessResponse>): void;
    deleteBranchConfiguration(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.SuccessResponse>): void;

    /**
     * Returns the list of builds for the branch
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildsForBranch(branch: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    getBuildsForBranch(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build[]>): void;

    /**
     * Create a build
     *
     * @param {string} branch The branch name
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.debug] Run build in debug mode
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    createBuild(branch: string, ownerName: string, appName: string, options: { debug? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    createBuild(branch: string, ownerName: string, appName: string, callback: ServiceCallback<models.Build[]>): void;

    /**
     * Returns the list of Git branches for this application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBranches(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getBranches(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * CrashOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface CrashOperations {

    /**
     * @summary Gets a list of application versions
     *
     * Gets a list of application versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getAppVersions(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppVersion[]>): void;
    getAppVersions(ownerName: string, appName: string, callback: ServiceCallback<models.AppVersion[]>): void;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {string} symbolId The ID of the symbol (uuid of the symbol)
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbol(symbolId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbol(symbolId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbols(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbols(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for
     * the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the symbol upload.
     * Possible values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    patchSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @param {string} symbolUploadId The ID of the symbol upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSymbolUpload(symbolUploadId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolUploads(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolUploads(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} symbolType The type of the symbol for the current symbol
     * upload. Possible values include: 'Apple', 'AndroidNative', 'AndroidJava',
     * 'Windows'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.clientCallback] The callback URL that the client
     * can optionally provide to get status updates for the current symbol upload
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    postSymbolUpload(ownerName: string, appName: string, symbolType: string, options: { clientCallback? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    postSymbolUpload(ownerName: string, appName: string, symbolType: string, callback: ServiceCallback<any>): void;

    /**
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.crashGroupId] Filter by group. Can be empty
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupStatus] Possible values include: 'Open',
     * 'Closed', 'Ignored'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHistogramPlatforms(ownerName: string, appName: string, options: { crashGroupId? : string, lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, errorType? : string, appVersion? : string, groupStatus? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Segmentation>): void;
    getHistogramPlatforms(ownerName: string, appName: string, callback: ServiceCallback<models.Segmentation>): void;

    /**
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.crashGroupId] Filter by group. Can be empty
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupStatus] Possible values include: 'Open',
     * 'Closed', 'Ignored'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHistogramDevices(ownerName: string, appName: string, options: { crashGroupId? : string, lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, errorType? : string, appVersion? : string, groupStatus? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Segmentation>): void;
    getHistogramDevices(ownerName: string, appName: string, callback: ServiceCallback<models.Segmentation>): void;

    /**
     * Crash Histogram. Returns the total number of crashes.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.crashGroupId] Filter by group. Can be empty
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupStatus] Possible values include: 'Open',
     * 'Closed', 'Ignored'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHistogramCrashes(ownerName: string, appName: string, options: { crashGroupId? : string, lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, errorType? : string, appVersion? : string, groupStatus? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Histogram>): void;
    getHistogramCrashes(ownerName: string, appName: string, callback: ServiceCallback<models.Histogram>): void;

    /**
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.crashGroupId] Filter by group. Can be empty
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupStatus] Possible values include: 'Open',
     * 'Closed', 'Ignored'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getHistogramCrashFreeUsers(ownerName: string, appName: string, options: { crashGroupId? : string, lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, errorType? : string, appVersion? : string, groupStatus? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Histogram>): void;
    getHistogramCrashFreeUsers(ownerName: string, appName: string, callback: ServiceCallback<models.Histogram>): void;

    /**
     * Gets a stacktrace for a specific error
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getGroupStacktrace(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getGroupStacktrace(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets a stacktrace for a specific error
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific error
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getErrorStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Stacktrace>): void;
    getErrorStacktrace(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Stacktrace>): void;

    /**
     * Gets a specific error for an app
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} crashId id of a specific error
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the error should include
     * the raw error report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the error should include the
     * custom log report. Default is false
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash>): void;
    getCrash(crashGroupId: string, crashId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash>): void;

    /**
     * Gets all crashes of the app
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {boolean} [options.includeReport] true if the error should include
     * the raw error report. Default is false
     * 
     * @param {boolean} [options.includeLog] true if the error should include the
     * custom log report. Default is false
     * 
     * @param {date} [options.dateFrom]
     * 
     * @param {date} [options.dateTo]
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.errorType] Possible values include: 'something',
     * 'else'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashes(crashGroupId: string, ownerName: string, appName: string, options: { includeReport? : boolean, includeLog? : boolean, dateFrom? : Date, dateTo? : Date, appVersion? : string, errorType? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Crash[]>): void;
    getCrashes(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.Crash[]>): void;

    /**
     * Gets a specific group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashGroup(crashGroupId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    getCrashGroup(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * Updates a group
     *
     * @param {string} crashGroupId id of a specific group
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] Possible values include: 'Open', 'Closed',
     * 'Ignored'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    patchCrashGroup(crashGroupId: string, ownerName: string, appName: string, options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup>): void;
    patchCrashGroup(crashGroupId: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup>): void;

    /**
     * @summary Gets a list of crashes
     *
     * Gets a list of crashes
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.lastOccurrenceFrom] Earliest date when the last time
     * a crash occured in a error group
     * 
     * @param {date} [options.lastOccurrenceTo] Latest date when the last time a
     * crash occured in a error group
     * 
     * @param {string} [options.appVersion] version
     * 
     * @param {string} [options.groupType] Possible values include: 'GroupType1',
     * 'GroupType2'
     * 
     * @param {string} [options.groupStatus] Possible values include: 'Open',
     * 'Closed', 'Ignored'
     * 
     * @param {string} [options.groupTextSearch] A freetext search that matches in
     * error, error types, error stack_traces and error user
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getCrashGroups(ownerName: string, appName: string, options: { lastOccurrenceFrom? : Date, lastOccurrenceTo? : Date, appVersion? : string, groupType? : string, groupStatus? : string, groupTextSearch? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroup[]>): void;
    getCrashGroups(ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroup[]>): void;
}

/**
 * @class
 * Distribute
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Distribute {

    /**
     * Return the details for this package.
     *
     * @param {string} packageId The ID of the package
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPackageInfo(packageId: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PackageDetails>): void;
    getPackageInfo(packageId: string, ownerName: string, appName: string, callback: ServiceCallback<models.PackageDetails>): void;

    /**
     * Updates a package.
     *
     * @param {string} packageId The ID of the package
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The package state.<br>
     * <b>available</b>: The uploaded package has been distributed.<br>
     * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
     * . Possible values include: 'available', 'unavailable'
     * 
     * @param {string} [options.releaseNotes] Release notes for this package.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePackage(packageId: string, ownerName: string, appName: string, options: { status? : string, releaseNotes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updatePackage(packageId: string, ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Return detailed information about available packages.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] An OData style filter. Currently only
     * support the 'eq' comparision type. E.g. ?$filter=status eq 'Availabe'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getPackages(ownerName: string, appName: string, options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PackageDetails[]>): void;
    getPackages(ownerName: string, appName: string, callback: ServiceCallback<models.PackageDetails[]>): void;

    /**
     * Commits or aborts the upload process for a package for the specified
     * application
     *
     * @param {string} uploadId The ID of the upload
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {string} status The desired operation for the upload. Possible
     * values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    commitUpload(uploadId: string, ownerName: string, appName: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    commitUpload(uploadId: string, ownerName: string, appName: string, status: string, callback: ServiceCallback<any>): void;

    /**
     * Begins the upload process for a new package for the specified application
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginUpload(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginUpload(ownerName: string, appName: string, callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Analytics
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Analytics {

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    versions(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Versions>): void;
    versions(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Versions>): void;

    /**
     * Count of sessions per device in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionsPerDevice(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionsPerDevice>): void;
    sessionsPerDevice(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionsPerDevice>): void;

    /**
     * Gets session duration .
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionDurationsDistribution>): void;
    sessionDurationsDistribution(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionDurationsDistribution>): void;

    /**
     * Count of sessions in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} interval Size of interval in ISO 8601 duration format.
     * (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D),
     * 1 week (P1W), and 30 days (P30D).
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionCounts>): void;
    sessionCounts(start: Date|string, interval: string, ownerName: string, appName: string, callback: ServiceCallback<models.SessionCounts>): void;

    /**
     * Places in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    placeCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Places>): void;
    placeCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Places>): void;

    /**
     * OSes in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OSes>): void;
    operatingSystemCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.OSes>): void;

    /**
     * models in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    modelCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Models>): void;
    modelCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Models>): void;

    /**
     * languages in the time range
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {number} [options.count] The number of results to return
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    languageCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, count? : number, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Languages>): void;
    languageCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.Languages>): void;

    /**
     * Overall crashes and affected users count of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashOverall>): void;
    crashGroupTotals(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashOverall>): void;

    /**
     * top OSes of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupOSes>): void;
    crashGroupOperatingSystemCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupOSes>): void;

    /**
     * top models of the selected crash group with selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {number} [options.top] The maximum number of results to return.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, options: { top? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashGroupModels>): void;
    crashGroupModelCounts(crashGroupId: string, version: string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashGroupModels>): void;

    /**
     * Count of crashes by day in the time range of the selected crash group with
     * selected version
     *
     * @param {string} crashGroupId The id of the crash group
     * 
     * @param {string} version
     * 
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, options: { end? : Date, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashGroupCounts(crashGroupId: string, version: string, start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Overall crashes and affected users count of the selected crash groups with
     * selected versions
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {array} crashgroups
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashGroupsTotals(ownerName: string, appName: string, crashgroups: models.CrashgroupModelModel[], options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashesOverallItem[]>): void;
    crashGroupsTotals(ownerName: string, appName: string, crashgroups: models.CrashgroupModelModel[], callback: ServiceCallback<models.CrashesOverallItem[]>): void;

    /**
     * Percentage of crash-free device by day in the time range based on the
     * selected versions.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;
    crashFreeDevicePercentages(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashFreeDevicePercentages>): void;

    /**
     * Count of crashes by day in the time range based the selected versions.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    crashCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CrashCounts>): void;
    crashCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.CrashCounts>): void;

    /**
     * Count of active devices by interval in the time range.
     *
     * @param {date} start Start date time in data in ISO 8601 date time format
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The name of the application
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {date} [options.end] Last date time in data in ISO 8601 date time
     * format.
     * 
     * @param {array} [options.versions]
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deviceCounts(start: Date|string, ownerName: string, appName: string, options: { end? : Date, versions? : string[], customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
    deviceCounts(start: Date|string, ownerName: string, appName: string, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
}

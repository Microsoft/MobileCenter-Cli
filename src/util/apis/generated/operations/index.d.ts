/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Invitations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Invitations {

    /**
     * Rejects a pending invitation for the specified user
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reject(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    reject(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Accepts a pending invitation for the specified user
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    accept(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    accept(ownerName: string, appName: string, callback: ServiceCallback<models.ErrorResponse>): void;
}

/**
 * @class
 * Users
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Users {

    /**
     * Returns the user profile data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(callback: ServiceCallback<any>): void;

    /**
     * Updates the user profile and returns the updated user data
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.displayName] The full name of the user. Might for
     * example be first and last name
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(options: { displayName? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    update(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Apps
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Apps {

    /**
     * Gets the Xcode versions available to this app
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    xcodeVersions(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    xcodeVersions(callback: ServiceCallback<any>): void;

    /**
     * Removes the user from the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    removeUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    removeUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Returns the users associated with the app specified with the given app name
     * which belongs to the given owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listUsers(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listUsers(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns a particular symbol by id (uuid) for the provided application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolById(callback: ServiceCallback<any>): void;

    /**
     * Returns the list of all symbols for the provided application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSymbols(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listSymbols(callback: ServiceCallback<any>): void;

    /**
     * Gets a symbol upload by id for the specified application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getSymbolUploadById(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getSymbolUploadById(callback: ServiceCallback<any>): void;

    /**
     * Commits or aborts the symbol upload process for a new set of symbols for
     * the specified application
     *
     * @param {string} status The desired operation for the symbol upload.
     * Possible values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    commitOrAbortSymbolUpload(status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    commitOrAbortSymbolUpload(status: string, callback: ServiceCallback<any>): void;

    /**
     * Deletes a symbol upload by id for the specified application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteSymbolUpload(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteSymbolUpload(callback: ServiceCallback<any>): void;

    /**
     * Gets a list of all uploads for the specified application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listSymbolUploads(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listSymbolUploads(callback: ServiceCallback<any>): void;

    /**
     * Begins the symbol upload process for a new set of symbols for the specified
     * application
     *
     * @param {string} symbolType The type of the symbol for the current symbol
     * upload. Possible values include: 'Apple', 'AndroidNative', 'AndroidJava',
     * 'Windows'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.clientCallback] The callback URL that the client
     * can optionally provide to get status updates for the current symbol upload
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginSymbolUpload(symbolType: string, options: { clientCallback? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginSymbolUpload(symbolType: string, callback: ServiceCallback<any>): void;

    /**
     * Gets the repositories available from the source code host
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listRepositories(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listRepositories(callback: ServiceCallback<any>): void;

    /**
     * Returns the repository build configuration status of the app
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getRepositoryConfigurationStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getRepositoryConfigurationStatus(callback: ServiceCallback<any>): void;

    /**
     * Configures the repository for build
     *
     * @param {string} repoUrl The repository url
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    configureBuildRepository(repoUrl: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    configureBuildRepository(repoUrl: string, callback: ServiceCallback<any>): void;

    /**
     * Removes the configuration for the respository
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteRepositoryConfiguration(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteRepositoryConfiguration(callback: ServiceCallback<any>): void;

    /**
     * Updates a package.
     *
     * @param {string} packageId The ID of the package
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The package state.<br>
     * <b>available</b>: The uploaded package has been distributed.<br>
     * <b>unavailable</b>: The uploaded package is not visible to the user. <br>
     * . Possible values include: 'available', 'unavailable'
     * 
     * @param {string} [options.releaseNotes] Release notes for this package.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updatePackage(packageId: string, options: { status? : string, releaseNotes? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    updatePackage(packageId: string, callback: ServiceCallback<any>): void;

    /**
     * Return detailed information about available packages.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.filter] An OData style filter. Currently only
     * support the 'eq' comparision type. E.g. ?$filter=status eq 'Availabe'
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listPackages(options: { filter? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PackageDetails[]>): void;
    listPackages(callback: ServiceCallback<models.PackageDetails[]>): void;

    /**
     * Commits or aborts the upload process for a package for the specified
     * application
     *
     * @param {string} uploadId The ID of the upload
     * 
     * @param {string} status The desired operation for the upload. Possible
     * values include: 'committed', 'aborted'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    commitOrAbortPackageUpload(uploadId: string, status: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    commitOrAbortPackageUpload(uploadId: string, status: string, callback: ServiceCallback<any>): void;

    /**
     * Begins the upload process for a new package for the specified application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    beginPackageUpload(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    beginPackageUpload(callback: ServiceCallback<any>): void;

    /**
     * Invites a new or existing user to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    inviteUser(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    inviteUser(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Removes a user's invitation to an app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {string} userEmail The email of the user to Invites
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteInvitation(ownerName: string, appName: string, userEmail: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ErrorResponse>): void;
    deleteInvitation(ownerName: string, appName: string, userEmail: string, callback: ServiceCallback<models.ErrorResponse>): void;

    /**
     * Gets the pending invitations for the app
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listInvitations(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    listInvitations(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Returns commit information for a batch of shas
     *
     * @param {string} shaCollection A collection of commit SHAs comma-delimited
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listCommits(shaCollection: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Branch[]>): void;
    listCommits(shaCollection: string, callback: ServiceCallback<models.Branch[]>): void;

    /**
     * Downloads an artifact of the build
     *
     * @param {string} downloadType The download type. Possible values include:
     * 'build', 'symbols', 'logs'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    downloadArtifact(downloadType: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
    downloadArtifact(downloadType: string, callback: ServiceCallback<void>): void;

    /**
     * Returns the build detail for the given build ID
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getBuildDetails(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    getBuildDetails(callback: ServiceCallback<models.Build>): void;

    /**
     * Updates the build properties
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.status] The build status
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    updateBuildProperties(options: { status? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build>): void;
    updateBuildProperties(callback: ServiceCallback<models.Build>): void;

    /**
     * Return a specific app with the given app name which belongs to the given
     * owner.
     *
     * @param {string} ownerName The name of the owner
     * 
     * @param {string} appName The slug name of the app
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    get(ownerName: string, appName: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    get(ownerName: string, appName: string, callback: ServiceCallback<any>): void;

    /**
     * Partially updates a single app
     *
     * @param {string} appName The slug name of the app
     * 
     * @param {string} ownerName The name of the owner
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] A short text describing the app
     * 
     * @param {string} [options.displayName] The display name of the app
     * 
     * @param {string} [options.name] The name of the app used in URLs
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    update(appName: string, ownerName: string, options: { description? : string, displayName? : string, name? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AppResponse>): void;
    update(appName: string, ownerName: string, callback: ServiceCallback<models.AppResponse>): void;

    /**
     * Creates a new app and returns it to the caller
     *
     * @param {object} app The data for the app
     * 
     * @param {string} [app.description] A short text describing the app
     * 
     * @param {string} [app.displayName] The full name of the user. Might for
     * example be first and last name
     * 
     * @param {string} [app.language] The primary programming language used in the
     * app
     * 
     * @param {string} [app.name] The name of the app used in URLs
     * 
     * @param {string} [app.platform] The platform of the app. Possible values
     * include: 'iOS', 'Android'
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(app: models.AppRequest, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(app: models.AppRequest, callback: ServiceCallback<any>): void;

    /**
     * Returns a list of apps
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Branches
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Branches {

    /**
     * Returns the projects for the branch
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    listProjects(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Project[]>): void;
    listProjects(callback: ServiceCallback<models.Project[]>): void;

    /**
     * Gets the branch configuration
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    getConfig(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    getConfig(callback: ServiceCallback<any>): void;

    /**
     * Configures the branch for build
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    configure(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<{ [propertyName: string]: models.BranchProperties }>): void;
    configure(callback: ServiceCallback<{ [propertyName: string]: models.BranchProperties }>): void;

    /**
     * Reconfigures the branch for build
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    reconfigure(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<{ [propertyName: string]: models.BranchProperties }>): void;
    reconfigure(callback: ServiceCallback<{ [propertyName: string]: models.BranchProperties }>): void;

    /**
     * Deletes the branch build configuration
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteConfig(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SuccessResponse>): void;
    deleteConfig(callback: ServiceCallback<models.SuccessResponse>): void;

    /**
     * Returns the list of Git branches for this application
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(callback: ServiceCallback<any>): void;
}

/**
 * @class
 * Builds
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Builds {

    /**
     * Returns the list of builds for the branch
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    list(callback: ServiceCallback<models.Build[]>): void;

    /**
     * Create a build
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Build[]>): void;
    create(callback: ServiceCallback<models.Build[]>): void;
}

/**
 * @class
 * VersionsOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface VersionsOperations {

    /**
     * Count of active versions in the time range ordered by version.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    counts(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Versions>): void;
    counts(callback: ServiceCallback<models.Versions>): void;
}

/**
 * @class
 * Sessions
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Sessions {

    /**
     * Count of sessions per device in the time range
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    countsPerDevice(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionsPerDevice>): void;
    countsPerDevice(callback: ServiceCallback<models.SessionsPerDevice>): void;

    /**
     * Gets session duration .
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    durationDistribution(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionDurationsDistribution>): void;
    durationDistribution(callback: ServiceCallback<models.SessionDurationsDistribution>): void;

    /**
     * Count of sessions in the time range.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    counts(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SessionCounts>): void;
    counts(callback: ServiceCallback<models.SessionCounts>): void;
}

/**
 * @class
 * Devices
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Devices {

    /**
     * Places in the time range
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    places(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Places>): void;
    places(callback: ServiceCallback<models.Places>): void;

    /**
     * OSes in the time range
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    oSes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.OSes>): void;
    oSes(callback: ServiceCallback<models.OSes>): void;

    /**
     * models in the time range
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    models(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Models>): void;
    models(callback: ServiceCallback<models.Models>): void;

    /**
     * languages in the time range
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    languages(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Languages>): void;
    languages(callback: ServiceCallback<models.Languages>): void;

    /**
     * Count of active devices by interval in the time range.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    activeCounts(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ActiveDeviceCounts>): void;
    activeCounts(callback: ServiceCallback<models.ActiveDeviceCounts>): void;
}

/**
 * @class
 * Available
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface Available {

    /**
     * Get all available versions in the time range.
     *
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    versions(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.AvailableVersions>): void;
    versions(callback: ServiceCallback<models.AvailableVersions>): void;
}

/**
 * @class
 * ApiTokens
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 */
export interface ApiTokens {

    /**
     * Delete the api_token object with the specific id
     *
     * @param {string} authorization The basic auth header including the
     * base64-encoded username or email and password
     * 
     * @param {string} apiTokenId The unique ID (UUID) of the api token
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    deleteMethod(authorization: string, apiTokenId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    deleteMethod(authorization: string, apiTokenId: string, callback: ServiceCallback<any>): void;

    /**
     * Returns api tokens for the authenticated user
     *
     * @param {string} authorization The basic auth header including the
     * base64-encoded username or email and password
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    list(authorization: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    list(authorization: string, callback: ServiceCallback<any>): void;

    /**
     * Creates a new API token
     *
     * @param {string} authorization The basic auth header including the
     * base64-encoded username or email and password
     * 
     * @param {object} [options] Optional Parameters.
     * 
     * @param {string} [options.description] The description of the token
     * 
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     * 
     * @param {ServiceCallback} [callback] callback function; see ServiceCallback
     * doc in ms-rest index.d.ts for details
     */
    create(authorization: string, options: { description? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<any>): void;
    create(authorization: string, callback: ServiceCallback<any>): void;
}

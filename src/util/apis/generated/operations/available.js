/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var WebResource = msRest.WebResource;

/**
 * @class
 * Available
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the SonomaClient.
 * Initializes a new instance of the Available class.
 * @constructor
 *
 * @param {SonomaClient} client Reference to the service client.
 */
function Available(client) {
  this.client = client;
}

/**
 * Get all available versions in the time range.
 *
 * @param {object} [options] Optional Parameters.
 * 
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 * 
 * @param {function} callback
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object.
 *                      See {@link AvailableVersions} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
Available.prototype.versions = function (options, callback) {
  var client = this.client;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if(!this.client.start || !(this.client.start instanceof Date || 
        (typeof this.client.start.valueOf() === 'string' && !isNaN(Date.parse(this.client.start))))) {
          throw new Error('this.client.start cannot be null or undefined and it must be of type date.');
        }
    if (this.client.end && !(this.client.end instanceof Date || 
        (typeof this.client.end.valueOf() === 'string' && !isNaN(Date.parse(this.client.end))))) {
          throw new Error('this.client.end must be of type date.');
        }
    if (this.client.top !== null && this.client.top !== undefined && typeof this.client.top !== 'number') {
      throw new Error('this.client.top must be of type number.');
    }
    if (this.client.top !== null && this.client.top !== undefined) {
      if (this.client.top > 2000)
      {
        throw new Error('"this.client.top" should satisfy the constraint - "InclusiveMaximum": 2000');
      }
      if (this.client.top < 1)
      {
        throw new Error('"this.client.top" should satisfy the constraint - "InclusiveMinimum": 1');
      }
    }
    if (this.client.skip !== null && this.client.skip !== undefined && typeof this.client.skip !== 'number') {
      throw new Error('this.client.skip must be of type number.');
    }
    if (this.client.skip !== null && this.client.skip !== undefined) {
      if (this.client.skip < 0)
      {
        throw new Error('"this.client.skip" should satisfy the constraint - "InclusiveMinimum": 0');
      }
    }
    if (this.client.filter !== null && this.client.filter !== undefined && typeof this.client.filter.valueOf() !== 'string') {
      throw new Error('this.client.filter must be of type string.');
    }
    if (this.client.inlinecount !== null && this.client.inlinecount !== undefined && typeof this.client.inlinecount.valueOf() !== 'string') {
      throw new Error('this.client.inlinecount must be of type string.');
    }
    if (this.client.ownerName === null || this.client.ownerName === undefined || typeof this.client.ownerName.valueOf() !== 'string') {
      throw new Error('this.client.ownerName cannot be null or undefined and it must be of type string.');
    }
    if (this.client.appName === null || this.client.appName === undefined || typeof this.client.appName.valueOf() !== 'string') {
      throw new Error('this.client.appName cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  var requestUrl = this.client.baseUri +
                   '//v0.1/apps/{owner_name}/{app_name}/analytics/available_versions';
  requestUrl = requestUrl.replace('{owner_name}', encodeURIComponent(this.client.ownerName));
  requestUrl = requestUrl.replace('{app_name}', encodeURIComponent(this.client.appName));
  var queryParameters = [];
  queryParameters.push('start=' + encodeURIComponent(client.serializeObject(this.client.start)));
  if (this.client.end !== null && this.client.end !== undefined) {
    queryParameters.push('end=' + encodeURIComponent(client.serializeObject(this.client.end)));
  }
  if (this.client.top !== null && this.client.top !== undefined) {
    queryParameters.push('$top=' + encodeURIComponent(this.client.top.toString()));
  }
  if (this.client.skip !== null && this.client.skip !== undefined) {
    queryParameters.push('$skip=' + encodeURIComponent(this.client.skip.toString()));
  }
  if (this.client.filter !== null && this.client.filter !== undefined) {
    queryParameters.push('$filter=' + encodeURIComponent(this.client.filter));
  }
  if (this.client.inlinecount !== null && this.client.inlinecount !== undefined) {
    queryParameters.push('$inlinecount=' + encodeURIComponent(this.client.inlinecount));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }
  // trim all duplicate forward slashes in the url
  var regex = /([^:]\/)\/+/gi;
  requestUrl = requestUrl.replace(regex, '$1');

  // Create HTTP transport objects
  var httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;
  // Set Headers
  if(options) {
    for(var headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, function (err, response, responseBody) {
    if (err) {
      return callback(err);
    }
    var statusCode = response.statusCode;
    if (statusCode !== 200) {
      var error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      var parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          if (parsedErrorResponse.error) parsedErrorResponse = parsedErrorResponse.error;
          if (parsedErrorResponse.code) error.code = parsedErrorResponse.code;
          if (parsedErrorResponse.message) error.message = parsedErrorResponse.message;
        }
        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
          var resultMapper = new client.models['ErrorModel']().mapper();
          error.body = client.deserialize(resultMapper, parsedErrorResponse, 'error.body');
        }
      } catch (defaultError) {
        error.message = util.format('Error "%s" occurred in deserializing the responseBody ' + 
                         '- "%s" for the default response.', defaultError.message, responseBody);
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    var result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      var parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          var resultMapper = new client.models['AvailableVersions']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        var deserializationError = new Error(util.format('Error "%s" occurred in deserializing the responseBody - "%s"', error, responseBody));
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
};


module.exports = Available;

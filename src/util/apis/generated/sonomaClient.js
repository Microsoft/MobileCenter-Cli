/*
 * Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

var util = require('util');
var msRest = require('ms-rest');
var ServiceClient = msRest.ServiceClient;

var models = require('./models');
var operations = require('./operations');

/**
 * @class
 * Initializes a new instance of the SonomaClient class.
 * @constructor
 *
 * @param {string} appName - The name of the application
 *
 * @param {string} ownerName - The name of the owner
 *
 * @param {number} buildId - The build ID
 *
 * @param {string} branch - The branch name
 *
 * @param {string} sha - The SHA hash
 *
 * @param {string} symbolUploadId - The ID of the symbol upload
 *
 * @param {string} symbolId - The ID of the symbol (uuid of the symbol)
 *
 * @param {string} crashGroupId - id of a specific group
 *
 * @param {string} crashId - id of a specific error
 *
 * @param {date} start - Start date time in data in ISO 8601 date time format
 *
 * @param {string} interval - Size of interval in ISO 8601 duration format. (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1 week (P1W), and 30 days (P30D).
 *
 * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
 *
 * @param {string} [baseUri] - The base URI of the service.
 *
 * @param {object} [options] - The parameter options
 *
 * @param {Array} [options.filters] - Filters to be added to the request pipeline
 *
 * @param {object} [options.requestOptions] - Options for the underlying request object
 * {@link https://github.com/request/request#requestoptions-callback Options doc}
 *
 * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
 *
 * @param {string} [options.form] - The selected form of the object. Possible values include: 'lite', 'full'
 *
 * @param {string} [options.appVersion] - version
 *
 * @param {date} [options.dateFrom] - 
 *
 * @param {date} [options.dateTo] - 
 *
 * @param {date} [options.lastOccurrenceFrom] - Earliest date when the last time a crash occured in a error group
 *
 * @param {date} [options.lastOccurrenceTo] - Latest date when the last time a crash occured in a error group
 *
 * @param {string} [options.errorType] - Possible values include: 'something', 'else'
 *
 * @param {string} [options.groupType] - Possible values include: 'GroupType1', 'GroupType2'
 *
 * @param {string} [options.groupStatus] - Possible values include: 'Open', 'Closed', 'Ignored'
 *
 * @param {boolean} [options.includeReport] - true if the error should include the raw error report. Default is false
 *
 * @param {boolean} [options.includeLog] - true if the error should include the custom log report. Default is false
 *
 * @param {string} [options.groupTextSearch] - A freetext search that matches in error, error types, error stack_traces and error user
 *
 * @param {date} [options.end] - Last date time in data in ISO 8601 date time format.
 *
 * @param {array} [options.versions] - 
 *
 * @param {number} [options.count] - The number of results to return
 *
 * @param {number} [options.top] - The maximum number of results to return.
 *
 * @param {number} [options.skip] - The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination.
 *
 * @param {string} [options.filter] - A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering.
 *
 * @param {string} [options.inlinecount] - Controls whether or not to include a count of all the items accross all pages. Possible values include: 'allpages', 'none'
 *
 */
function SonomaClient(appName, ownerName, buildId, branch, sha, symbolUploadId, symbolId, crashGroupId, crashId, start, interval, credentials, baseUri, options) {
  this.includeReport = false;
  this.includeLog = false;
  this.top = 30;
  this.skip = 0;
  this.inlinecount = 'none';
  if (appName === null || appName === undefined) {
    throw new Error('\'appName\' cannot be null.');
  }
  if (ownerName === null || ownerName === undefined) {
    throw new Error('\'ownerName\' cannot be null.');
  }
  if (buildId === null || buildId === undefined) {
    throw new Error('\'buildId\' cannot be null.');
  }
  if (branch === null || branch === undefined) {
    throw new Error('\'branch\' cannot be null.');
  }
  if (sha === null || sha === undefined) {
    throw new Error('\'sha\' cannot be null.');
  }
  if (symbolUploadId === null || symbolUploadId === undefined) {
    throw new Error('\'symbolUploadId\' cannot be null.');
  }
  if (symbolId === null || symbolId === undefined) {
    throw new Error('\'symbolId\' cannot be null.');
  }
  if (crashGroupId === null || crashGroupId === undefined) {
    throw new Error('\'crashGroupId\' cannot be null.');
  }
  if (crashId === null || crashId === undefined) {
    throw new Error('\'crashId\' cannot be null.');
  }
  if (start === null || start === undefined) {
    throw new Error('\'start\' cannot be null.');
  }
  if (interval === null || interval === undefined) {
    throw new Error('\'interval\' cannot be null.');
  }
  if (credentials === null || credentials === undefined) {
    throw new Error('\'credentials\' cannot be null.');
  }

  if (!options) options = {};

  SonomaClient['super_'].call(this, credentials, options);
  this.baseUri = baseUri;
  if (!this.baseUri) {
    this.baseUri = 'https://localhost:1700/';
  }
  this.appName = appName;
  this.ownerName = ownerName;
  this.buildId = buildId;
  this.branch = branch;
  this.sha = sha;
  this.symbolUploadId = symbolUploadId;
  this.symbolId = symbolId;
  this.crashGroupId = crashGroupId;
  this.crashId = crashId;
  this.start = start;
  this.interval = interval;
  this.credentials = credentials;

  if(options.form !== null && options.form !== undefined) { 
    this.form = options.form;
  }
  if(options.appVersion !== null && options.appVersion !== undefined) { 
    this.appVersion = options.appVersion;
  }
  if(options.dateFrom !== null && options.dateFrom !== undefined) { 
    this.dateFrom = options.dateFrom;
  }
  if(options.dateTo !== null && options.dateTo !== undefined) { 
    this.dateTo = options.dateTo;
  }
  if(options.lastOccurrenceFrom !== null && options.lastOccurrenceFrom !== undefined) { 
    this.lastOccurrenceFrom = options.lastOccurrenceFrom;
  }
  if(options.lastOccurrenceTo !== null && options.lastOccurrenceTo !== undefined) { 
    this.lastOccurrenceTo = options.lastOccurrenceTo;
  }
  if(options.errorType !== null && options.errorType !== undefined) { 
    this.errorType = options.errorType;
  }
  if(options.groupType !== null && options.groupType !== undefined) { 
    this.groupType = options.groupType;
  }
  if(options.groupStatus !== null && options.groupStatus !== undefined) { 
    this.groupStatus = options.groupStatus;
  }
  if(options.includeReport !== null && options.includeReport !== undefined) { 
    this.includeReport = options.includeReport;
  }
  if(options.includeLog !== null && options.includeLog !== undefined) { 
    this.includeLog = options.includeLog;
  }
  if(options.groupTextSearch !== null && options.groupTextSearch !== undefined) { 
    this.groupTextSearch = options.groupTextSearch;
  }
  if(options.end !== null && options.end !== undefined) { 
    this.end = options.end;
  }
  if(options.versions !== null && options.versions !== undefined) { 
    this.versions = options.versions;
  }
  if(options.count !== null && options.count !== undefined) { 
    this.count = options.count;
  }
  if(options.top !== null && options.top !== undefined) { 
    this.top = options.top;
  }
  if(options.skip !== null && options.skip !== undefined) { 
    this.skip = options.skip;
  }
  if(options.filter !== null && options.filter !== undefined) { 
    this.filter = options.filter;
  }
  if(options.inlinecount !== null && options.inlinecount !== undefined) { 
    this.inlinecount = options.inlinecount;
  }
  this.invitations = new operations.Invitations(this);
  this.users = new operations.Users(this);
  this.xcodeVersions = new operations.XcodeVersions(this);
  this.versionsOperations = new operations.VersionsOperations(this);
  this.apps = new operations.Apps(this);
  this.symbols = new operations.Symbols(this);
  this.symbolUploads = new operations.SymbolUploads(this);
  this.symbolUpLoadsOperations = new operations.SymbolUpLoadsOperations(this);
  this.symbolUploadOperations = new operations.SymbolUploadOperations(this);
  this.repositories = new operations.Repositories(this);
  this.packages = new operations.Packages(this);
  this.packageModel = new operations.PackageModel(this);
  this.packageUpload = new operations.PackageUpload(this);
  this.crashOperations = new operations.CrashOperations(this);
  this.commits = new operations.Commits(this);
  this.builds = new operations.Builds(this);
  this.branches = new operations.Branches(this);
  this.sessions = new operations.Sessions(this);
  this.devices = new operations.Devices(this);
  this.available = new operations.Available(this);
  this.apiTokens = new operations.ApiTokens(this);
  this.models = models;
  msRest.addSerializationMixin(this);
}

util.inherits(SonomaClient, ServiceClient);

module.exports = SonomaClient;

# AppCenter CLI
#
# Triggers are configured in the UI

jobs:
- job:

  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - script: |
      cd appcenter-file-upload-client-node
      npm install
      npm install -g eslint
      npm run build
      npm run test
      cd ..
    displayName: 'Build and test appcenter-file-upload-client-node'

  - script: |
      npm ci
      npm run build
    displayName: 'Install and build'

  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Governance (PR)
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: false
      ignoreDirectories: '$(COMPONENT_GOVERNANCE_IGNORE_DIRS)'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

  - task: ComponentGovernanceComponentDetection@0
    displayName: Component Governance (CI)
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'Medium'
      failOnAlert: false
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  - script: |
      npm run test:ci || [ -f './test-results.xml' ]
    displayName: 'Run tests (with JUnit output)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test-results.xml'
      searchFolder: '$(Build.SourcesDirectory)'
      failTaskOnFailedTests: true
      testRunTitle: 'Verify unit test result'
    displayName: 'Verify unit test result'

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: '$(API_TOKEN_KEY_VAULT_AZURE_SUBSCRIPTION)'
      KeyVaultName: '$(API_TOKEN_KEY_VAULT)'
      SecretsFilter: 'ac-cli-account-api-token'

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/test/functional/Invoke-FunctionalTests.ps1'
      arguments: '-Token $(ac-cli-account-api-token)'
      pwsh: true
    displayName: 'Run functional tests'

  - script: |
      [ -f './test/functional/testresult.xml' ]
    displayName: 'Verify that functional test result file exists'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'NUnit'
      testResultsFiles: 'testresult.xml'
      searchFolder: '$(Build.SourcesDirectory)/test/functional'
      failTaskOnFailedTests: true
      testRunTitle: 'Verify functional test result'
    displayName: 'Verify functional test result'

  - script: |
      npm pack
    displayName: 'Package for npm release'

  - task: DeleteFiles@1
    inputs:
      contents: node_modules
    displayName: 'Delete node_modules'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: 'tar'
      archiveFile: '$(Build.ArtifactStagingDirectory)/npm/$(Build.BuildId).tgz'
      replaceExistingArchive: true
      verbose: true
    displayName: 'Prepare npm artifact'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
      ArtifactName: 'npm'
    displayName: 'Publish npm artifact'
